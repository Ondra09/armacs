#+TITLE: Emacs Config
#+AUTHOR: Abraham Raji
#+EMAIL: abrahamraji99@gmail.com

* User Info
     Name and Email.
     #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Abraham Raji"
               user-email "abrahamraji99@gmail.com")
     #+END_SRC
* Startup
-  Start maximized 
   #+BEGIN_SRC emacs-lisp
   (setq frame-resize-pixelwise t
   x-frame-normalize-before-maximize t)
   (add-to-list 'initial-frame-alist '(fullscreen . fullheight))
   #+END_SRC
- Set UTF-8 encoding
  #+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  #+END_SRC
- Inhibit startup screen
  #+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  #+end_src
* Package Management
      -  Sources
      This piece of code tells emacs where to find packages from
      #+BEGIN_SRC emacs-lisp
      (require 'package)
      (setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))
	(package-initialize)
      #+END_SRC
      -  use-package command and its configs.
      For installing packages
     #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
     (package-install 'use-package)
     (setq load-prefer-newer t))
     (setq use-package-verbose t)
     (setq use-package-always-ensure t)
     (require 'use-package)
     #+END_SRC
* Quickly visit Emacs configuration
   #+BEGIN_SRC emacs-lisp
     (defun 4br/visit-emacs-config ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") '4br/visit-emacs-config)
   #+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
  (use-package liso-theme
  :ensure t)
  #+END_SRC
* Auto Compile
    #+BEGIN_SRC emacs-lisp
    (use-package auto-compile
    :config (auto-compile-on-load-mode))
   #+END_SRC
* Async
    Lets us use asynchronous processes wherever possible, pretty useful.
    #+BEGIN_SRC emacs-lisp
    (use-package async
    :ensure t
    :init (dired-async-mode 1))
    #+END_SRC
* auto-complete
- Lets you use the auto-complete package
   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
   :ensure t)
   (require 'auto-complete)
   (global-auto-complete-mode t)
   (add-to-list 'ac-modes 'org-mode)
   (ac-config-default)
   #+END_SRC
* flycheck
- Checks for spelling and syntax errors
  #+BEGIN_SRC emacs-lisp
      (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
      (add-hook 'elpy-mode-hook 'flycheck-mode);This creates a flycheck 
                                                                                 ;checker that runs proselint 
                                                                                 ;in texty buffers and displays my errors.
      (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
      (id (one-or-more (not (any " "))))
      (message (one-or-more not-newline)
      (zero-or-more "\n" (any " ") (one-or-more not-newline)))
      line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
      ;flycheck in the appropriate buffers
     (add-to-list 'flycheck-checkers 'proselint)
     (add-hook 'markdown-mode-hook #'flycheck-mode)
     (add-hook 'gfm-mode-hook #'flycheck-mode)
     (add-hook 'text-mode-hook #'flycheck-mode)
     (add-hook 'org-mode-hook #'flycheck-mode)
   #+END_SRC
* Title frame format
   This Line will give you this title: [filename]- GNU Emacs 26.1 (I use emacs26.1)
  #+BEGIN_SRC emacs-lisp
  (setq frame-title-format (list "%b- %F " emacs-version)
  icont-title-format(list "%b- GNU %F " emacs-version))
  #+END_SRC
* One-line Settings
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (defalias 'list-buffers 'ibuffer)
   (tool-bar-mode -1)
   (global-linum-mode t)
   (allout-mode) ;;outlining
   (global-font-lock-mode 1) ;;syntax highlighting
   (global-visual-line-mode t)
   (windmove-default-keybindings)
   (global-set-key (kbd "C-c <left>")  'windmove-left)
   (global-set-key (kbd "C-c <right>") 'windmove-right)
   (global-set-key (kbd "C-c <up>")    'windmove-up)
   (global-set-key (kbd "C-c <down>")  'windmove-down)
   ;; Use y/n instead of yes/no
   (fset 'yes-or-no-p 'y-or-n-p)   
    ;; make home and end behave
    (global-set-key (kbd "<home>") 'move-beginning-of-line)
    (global-set-key (kbd "<end>") 'move-end-of-line)
    ;; indicate visual-line-mode wrap
    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    ;; but be gentle
    (defface visual-line-wrap-face
      '((t (:foreground "gray")))
      "Face for visual line indicators.")
    (set-fringe-bitmap-face 'left-curly-arrow 'visual-line-wrap-face)
    (set-fringe-bitmap-face 'right-curly-arrow 'visual-line-wrap-face)

    ;; don't require two spaces for sentence end.
    (setq sentence-end-double-space nil)

    ;; The beeping can be annoying--turn it off
    (setq visible-bell t
          ring-bell-function #'ignore)

   #+END_SRC
* Menu bar
  Toggles reveal and hide menubar with the f10 key
   #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (defun my-menu-bar-open-after ()
  (remove-hook 'pre-command-hook 'my-menu-bar-open-after)
  (when (eq menu-bar-mode 42)
  (menu-bar-mode -1)))
  (defun my-menu-bar-open (&rest args)
  (interactive)
  (let ((open menu-bar-mode))
  (unless open
  (menu-bar-mode 1))
  (funcall 'menu-bar-open args)
  (unless open
  (setq menu-bar-mode 42)
  (add-hook 'pre-command-hook 'my-menu-bar-open-after))))
  (global-set-key [f10] 'my-menu-bar-open)
   #+END_SRC
* Text
  - Fancy symbols
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
   #+END_SRC
  - Highlight current line
   #+BEGIN_SRC emacs-lisp
    (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
   ; (set-face-attribute 'hl-line nil :inherit nil :background "#1e2224")
   #+END_SRC
* matlab
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/home/guyfawkes/.emacs.d/matlab-emacs-master")
     (load-library "matlab-load")
   #+END_SRC
* ido mode
  -Makes things more interactive
   #+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-eveywhere t)
  (ido-mode 1)
   #+END_SRC
* Scrolling
  -  System Scroll bars.
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC
  -  Mini-buffer Scroll bars.
   #+BEGIN_SRC emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
   #+END_SRC
  - Scroll Conservatively
   #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 100)
   #+END_SRC
* css-mode
   #+BEGIN_SRC elisp
   (use-package css-mode)
   #+END_SRC
* elpy
  For python development
   #+BEGIN_SRC emacs-lisp
   (use-package elpy
   :ensure t
   :config
   (elpy-enable))
   #+END_SRC
* htmlize
  Converts org documents into html files.
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize
   :ensure t)
   (setq org-html-postamble nil)
   #+END_SRC
* ox-reveal
  Makes org documents into presentations using js.
   #+BEGIN_SRC emacs-lisp
 ;  (add-to-list 'load-path "~/.emacs.d/ox-reveal")
  ; (require 'ox-reveal)
   ;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ; (setq org-reveal-mathjax t)
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)   
#+END_SRC
* Dired
   #+BEGIN_SRC emacs-lisp
  ;(use-package dired-details)
  ;(use-package dired)
  ;(use-package dired-open
  :config
  (setq dired-open-extensions
        '(("pdf" . "evince")
          ("mkv" . "vlc")
          ("mp4" . "vlc")
          ("avi" . "vlc")))
	  ;)
   #+END_SRC
   
* Org
** Trigger
  #+BEGIN_SRC emacs-lisp
   (global-set-key [kbd "C-c C-o"] 'org-mode)
  #+END_SRC
** Replacing (...)
  #+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â†´")
  #+END_SRC
** Display preferences
   I like to see an outline of pretty bullets instead of a list of asterisks.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :init
       (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC

   Enable spell-checking in Org-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+END_SRC

   Record the time that a todo was archived.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
   #+END_SRC

   When refiling an item, I'd like to use ido for completion.

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)
   #+END_SRC
** Exporting

   Allow export to markdown and beamer (for presentations).

   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
     (require 'ox-beamer)
   #+END_SRC

   Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(python . t)))
   #+END_SRC

   Translate regular ol' straight quotes to typographically-correct curly quotes
   when exporting.

   #+BEGIN_SRC emacs-lisp
     (setq org-export-with-smart-quotes t)
   #+END_SRC

- Exporting to HTML

     Don't include a footer with my contact and publishing information at the bottom
     of every exported HTML document.

     #+BEGIN_SRC emacs-lisp
       (setq org-html-postamble nil)
     #+END_SRC

     Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
     which checks the =$BROWSER= environment variable to choose the right browser.
     I'd like to always use Firefox, so:

     #+BEGIN_SRC emacs-lisp
       (setq browse-url-browser-function 'browse-url-generic
	     browse-url-generic-program "firefox")

       (setenv "BROWSER" "firefox")
     #+END_SRC
** TeX configuration

   I rarely write LaTeX directly any more, but I often export through it with
   org-mode, so I'm keeping them together.

   Automatically parse the file after loading it.

   #+BEGIN_SRC emacs-lisp
     (setq TeX-parse-self t)
   #+END_SRC

   Always use =pdflatex= when compiling LaTeX documents. I don't really have any
   use for DVIs.

   #+BEGIN_SRC emacs-lisp
     (setq TeX-PDF-mode t)
   #+END_SRC

   Open compiled PDFs in =evince= instead of in the editor.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       '(lambda ()
		  (delete '("\\.pdf\\'" . default) org-file-apps)
		  (add-to-list 'org-file-apps '("\\.pdf\\'" . "qpdfview %s"))))
   #+END_SRC

   Enable a minor mode for dealing with math (it adds a few useful keybindings),
   and always treat the current file as the "main" file. That's intentional, since
   I'm usually actually in an org document.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'LaTeX-mode-hook
	       (lambda ()
		 (LaTeX-math-mode)
		 (setq TeX-master t)))
   #+END_SRC
