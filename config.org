#+TITLE: Emacs Config
#+AUTHOR: Abraham Raji
#+EMAIL: abrahamraji99@gmail.com
#+STARTUP: overview
#+CREATOR: avronr
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: style margin-left: auto; margin-right: auto;

* User Info
=user-full-name= returns the full name of the logged-in user or the value of the 
environment variable =NAME=, if that is set. If the Emacs process’s user-id does 
not correspond to any known user (and provided =NAME= is not set), the result 
is "unknown". If uid is non-nil, then it should be a number (a user-id) or a 
string (a login name). Then =user-full-name= returns the full name corresponding 
to that user-id or login name. If you specify a user-id or login name that isn’t 
defined, it returns =nil=.
=user-mail-address= holds the nominal email address of the user who is using 
Emacs. Emacs normally sets this variable to a default value after reading your 
init files, but not if you have already set it. So you can set the variable to 
some other value in your init file if you do not want to use the default value.  
#+BEGIN_SRC emacs-lisp
   (setq user-full-name "Abraham Raji"
         user-email "abrahamraji99@gmail.com")
#+END_SRC
* Set UTF-8 encoding
UTF-8 (UCS Transformation Format 8) is the World Wide Web's most common 
character encoding. Each character is represented by one to four bytes. UTF-8 is 
backward-compatible with ASCII and can represent any standard Unicode character. 
This is now a universal standard, so it makes sense for us to enable it by 
default in our text editor.
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
* Package Management
This piece of code tells emacs where to find packages from or in more proper 
they are called 'repositories'. I personally use MELPA, ELPA and the official 
org-mode repo to get the latest version of orgmode. So keep what you want take 
out there rest. Oh and asuming you are new to elisp and emacs while editing 
these lines watch for the '()' and you should be fine.
#+BEGIN_SRC emacs-lisp
(require 'package)
 (setq package-archives
  '(("melpa" . "https://melpa.org/packages/")
    ("gnu" . "https://elpa.gnu.org/packages/")
    ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

Occasionally emacs will tell you it can't find a package in any of your declared 
repos all you will have to do is refresh your repositories. Unless the package 
doesn't actually exist in the repos the problem should be fixed. 

You can install the packages manually by:
1. first hit [Meta] and x 
2. then type 'package-install' and hit enter
3. then type in the name of the package you wish to install and hit enter again.
If the package exists in the repositories that you have asked emacs to look in, 
the packages will be installed or you will recieve an error message. If we 
directly use use package command in our config it will install the packages 
every time emacs starts up even if they're already installed so we cannot use it 
in our configs.You could also alternatively download packages as an archive file 
from the repos like the ones mentioned above and ask emacs to install them from 
the file. But unless you are developing packages for emacs and wish to test your 
package before publishing it, I do not recommend this method. As you may have 
noticed both process are a bit tedious and will only get worse as time goes by. 
A better approach in my opinion would be to use a package manager like use-
package which is what I do. You just need i the name of the package you wish to 
install and it will do the rest including updating the package.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package) ;;lisp equivalent of a while loop 
(package-install 'use-package);; We're using package install to install use-package
(setq load-prefer-newer t));; to install newer version when available
(setq use-package-verbose t);; This line is just a raincheck
(setq use-package-always-ensure t);;Always ensure that the package is installed
(require 'use-package)
#+END_SRC 
And that's about it for package management.
* Multiplexing emacs and emacsclient
Opening a anew file in the same emacs-session requires the use of emacsclient. 
Emacs command can be itself wrapped to do the smarter job to open the file if 
the session exists. To start session you need to start-server. This snippet will 
create server in first session of emacs. Add this to your emacs configuration file
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

To make this work you need to add this to you .bashrc [which can be found in 
your home folder if you're using a *nix based OS(Linux, Unix, FreeBSD, MacOS)]:
#+BEGIN_SRC sh
function emacs {
    if [[ $# -eq 0 ]]; then
        /usr/bin/emacs # "emacs" is function, will cause recursion
        return
    fi
    args=($*)
    for ((i=0; i <= ${#args}; i++)); do
        local a=${args[i]}
        # NOTE: -c for creating new frame
        if [[ ${a:0:1} == '-' && ${a} != '-c' && ${a} != '--' ]]; then
            /usr/bin/emacs ${args[*]}
            return
        fi
    done
    setsid emacsclient -n -a /usr/bin/emacs ${args[*]}
} 
#+END_SRC
* Async
async.el is a module for doing asynchronous processing in Emacs
#+BEGIN_SRC emacs-lisp
    (use-package async
    :ensure t
    :init (dired-async-mode 1)
    (autoload 'dired-async-mode "dired-async.el" nil t))
#+END_SRC
=dired-async-mode= will allow you to run asynchronously the dired commands for 
copying, renaming and symlinking. If you are a helm user, this will allow you 
to copy, rename etc... asynchronously from helm. Note that with helm you can 
disable this by running the copy, rename etc... commands with a prefix argument.
If you don't want to make dired/helm asynchronous disable it with dired-async-mode.
=need to add support for auth-source library=
* Backups
This is one of the things people usually want to change right away. By default, 
Emacs saves backup files in the current directory. These are the files ending 
in =~= that are cluttering up your directory lists. The following code stashes 
them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= 
(=find-file=) if I really need to.
#+begin_src emacs-lisp
(setq backup-directory-alist 
      '(("." . "~/.emacs.d/backups")))
;; autosave the undo-tree history
(setq undo-tree-history-directory-alist
      `((".*" . ,temporary-file-directory)))
#+end_src
 Disk space is cheap. Save lots.
 #+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
 #+end_src
