#+TITLE: Emacs Config
#+AUTHOR: Abraham Raji
#+EMAIL: abrahamraji99@gmail.com

* Personal Settings
** User Info
  Name and Email.
  #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Abraham Raji"
               user-email "abrahamraji99@gmail.com")
  #+END_SRC
** Set UTF-8 encoding
    #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    #+END_SRC
** Package Management
  -  Sources
    This piece of code tells emacs where to find packages from
    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))
	(package-initialize)
    #+END_SRC
  -  use-package command and its configs.
      For installing packages
      #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
     (package-install 'use-package)
     (setq load-prefer-newer t))
     (setq use-package-verbose t)
     (setq use-package-always-ensure t)
     (require 'use-package)
      #+END_SRC
** Quickly visit certain files
- Emacs configuration
  #+BEGIN_SRC emacs-lisp
     (defun 4br/visit-emacs-config ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") '4br/visit-emacs-config)
  #+END_SRC
- Resources
  #+BEGIN_SRC emacs-lisp
     (defun 4br/visit-resources ()
     (interactive)
     (find-file "~/Documents/Resources/resources.org"))
     (global-set-key (kbd "C-c r") '4br/visit-resources)
  #+END_SRC
- dotemacs
  #+BEGIN_SRC emacs-lisp
     (defun 4br/visit-dotemacs ()
     (interactive)
     (find-file "~/Documents/dotemacs/index.org"))
     (global-set-key (kbd "C-c d") '4br/visit-dotemacs)
  #+END_SRC

** Themes
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
  :ensure t)
  (load-theme 'doom-vibrant t)
  (require 'doom-themes)
  (setq sml/no-confirm-load-theme t)

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)
  
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;;(doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
   :init
   (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC
** Backups

  This is one of the things people usually want to change right away. By
  default, Emacs saves backup files in the current directory. These are
  the files ending in =~= that are cluttering up your directory lists.
  The following code stashes them all in =~/.emacs.d/backups=, where I
  can find them with =C-x C-f= (=find-file=) if I really need to.

  #+begin_src emacs-lisp
  (setq backup-directory-alist 
        '(("." . "~/.emacs.d/backups")))
;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  #+end_src

  Disk space is cheap. Save lots.

  #+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  #+end_src
** Modeine
   #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
      :ensure t
      :defer t
      :hook (after-init . doom-modeline-init))
   #+END_SRC
* Auto Compile
  #+BEGIN_SRC emacs-lisp
    (use-package auto-compile
    :config (auto-compile-on-load-mode))
  #+END_SRC
* Async
  Lets us use asynchronous processes wherever possible, pretty useful.
  #+BEGIN_SRC emacs-lisp
    (use-package async
    :ensure t
    :init (dired-async-mode 1))
  #+END_SRC
* auto-complete
  - Lets you use the auto-complete package
    #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
     :ensure t)
     (require 'auto-complete)
     (require 'auto-complete-config)
     (global-auto-complete-mode t)
     (add-to-list 'ac-modes 'org-mode)
     (ac-config-default)
    #+END_SRC
* flycheck
  - Checks for spelling and syntax errors
    #+BEGIN_SRC emacs-lisp
	(use-package flycheck
	:ensure t
	:init
	(global-flycheck-mode t))
	(add-hook 'elpy-mode-hook 'flycheck-mode)
	;This creates a flycheck checker that runs proselint in texty buffers and displays my errors.
	(flycheck-define-checker proselint
	"A linter for prose."
	:command ("proselint" source-inplace)
	:error-patterns
	((warning line-start (file-name) ":" line ":" column ": "
	(id (one-or-more (not (any " "))))
	(message (one-or-more not-newline)
	(zero-or-more "\n" (any " ") (one-or-more not-newline)))
	line-end))
	:modes (text-mode markdown-mode gfm-mode org-mode))
	;flycheck in the appropriate buffers
       (add-to-list 'flycheck-checkers 'proselint)
       (add-hook 'markdown-mode-hook #'flycheck-mode)
       (add-hook 'gfm-mode-hook #'flycheck-mode)
       (add-hook 'text-mode-hook #'flycheck-mode)
       (add-hook 'org-mode-hook #'flycheck-mode)
    #+END_SRC
- adding words
  #+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'cl))
  
  (defun append-aspell-word (new-word)
  (let ((header "personal_ws-1.1")
  (file-name (substitute-in-file-name "$HOME/.aspell.en.pws"))
  (read-words (lambda (file-name)
  (let ((all-lines (with-temp-buffer
  (insert-file-contents file-name)
  (split-string (buffer-string) "\n" t))))
  (if (null all-lines)
  ""
  (split-string (mapconcat 'identity (cdr all-lines) "\n")
  nil 
  t))))))
  (when (file-readable-p file-name)
  (let* ((cur-words (eval (list read-words file-name)))
  (all-words (delq header (cons new-word cur-words)))
  (words (delq nil (remove-duplicates all-words :test 'string=))))
  (with-temp-file file-name     
  (insert (concat header 
  " en "
  (number-to-string (length words))
  "\n"
  (mapconcat 'identity (sort words #'string<) "\n"))))))
  (unless (file-readable-p file-name)
  (with-temp-file file-name
  (insert (concat header " en 1\n" new-word "\n")))))
  (ispell-kill-ispell t) ; restart ispell
  (flyspell-mode)
  (flyspell-mode))
  
  (defun append-aspell-current ()
  "Add current word to aspell dictionary"
  (interactive)
  (append-aspell-word (thing-at-point 'word)))
  
  #+END_SRC
* Title frame format
  This Line will give you this title: [filename]- GNU Emacs 26.1 (I use emacs26.1)
  #+BEGIN_SRC emacs-lisp
  (setq frame-title-format (list "%b- %F " emacs-version)
  icont-title-format(list "%b- GNU %F " emacs-version))
  #+END_SRC
* One-line Settings
- Inhibit Startup Message
  #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
  #+END_SRC
- Lists buffers in ibuffer
  #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
  #+END_SRC
- Disables Toolbar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC
- Numbers on lines
   #+BEGIN_SRC emacs-lisp
   (global-linum-mode t)
   #+END_SRC
- Outlining
   #+BEGIN_SRC emacs-lisp
   (allout-mode)
   #+END_SRC
- Syntax Highlighting
   #+BEGIN_SRC emacs-lisp
   (global-font-lock-mode 1)
   #+END_SRC
- Windmove  
  #+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  #+END_SRC
- Use y/n instead of yes/no
  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)   
  #+END_SRC
- make home and end buttons do their job
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
  (global-set-key (kbd "<end>") 'move-end-of-line)
  #+END_SRC
-  don't require two spaces for sentence end.
  #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  #+END_SRC
-  The beeping can be annoying--turn it off
  #+BEGIN_SRC emacs-lisp
  (setq visible-bell t
          ring-bell-function #'ignore)
  #+END_SRC
- Start in fullscreen
  #+BEGIN_SRC emacs-lisp
  (toggle-frame-fullscreen)
  #+END_SRC
- Line wrapping
#+BEGIN_SRC emacs-lisp
    (remove-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'text-mode-hook 'visual-line-mode t)
    (add-hook 'prog-mode-hook
    (lambda()
    (toggle-truncate-lines t)
    (outline-minor-mode t)))
#+END_SRC
* Menu bar
  Toggles reveal and hide menubar with the f10 key
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (defun my-menu-bar-open-after ()
  (remove-hook 'pre-command-hook 'my-menu-bar-open-after)
  (when (eq menu-bar-mode 42)
  (menu-bar-mode -1)))
  (defun my-menu-bar-open (&rest args)
  (interactive)
  (let ((open menu-bar-mode))
  (unless open
  (menu-bar-mode 1))
  (funcall 'menu-bar-open args)
  (unless open
  (setq menu-bar-mode 42)
  (add-hook 'pre-command-hook 'my-menu-bar-open-after))))
  (global-set-key [f10] 'my-menu-bar-open)
  #+END_SRC
* Text
  - Fancy symbols
    #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
    #+END_SRC
  - Highlight current line
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
    (set-face-attribute 'hl-line nil :inherit nil :background "#1e2224")
    #+END_SRC
  - Fancy Font
      #+BEGIN_SRC emacs-lisp
      ;; Set default Font
     (set-face-attribute 'default nil
     :family "Roboto Mono"
     :height 160
     :weight 'normal
     :width 'normal)
      #+END_SRC
  - Word Wrap
    #+BEGIN_SRC emacs-lisp
    (visual-line-mode t)
        (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
    ;; but be gentle
    (defface visual-line-wrap-face
      '((t (:foreground "gray")))
      "Face for visual line indicators.")
    (set-fringe-bitmap-face 'left-curly-arrow 'visual-line-wrap-face)
    (set-fringe-bitmap-face 'right-curly-arrow 'visual-line-wrap-face)
    #+END_SRC
* matlab
  #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/home/guyfawkes/.emacs.d/matlab-emacs-src")
     (load-library "matlab-load")
  #+END_SRC
* ido mode
  -Makes things more interactive
  #+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-eveywhere t)
  (ido-mode 1)
  #+END_SRC
* PDF tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t)
(use-package org-pdfview
:ensure t)

(require 'pdf-tools)
(require 'org-pdfview)

#+END_SRC
* Scrolling
  -  System Scroll bars.
    #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
    #+END_SRC
  -  Mini-buffer Scroll bars.
    #+BEGIN_SRC emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
    #+END_SRC
  - Scroll Conservatively
    #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 100)
    #+END_SRC
* css-mode
  #+BEGIN_SRC elisp
   (use-package css-mode)
  #+END_SRC
* htmlize
  Converts org documents into html files.
  #+BEGIN_SRC emacs-lisp
   (use-package htmlize
   :ensure t)
   (setq org-html-postamble nil)
  #+END_SRC
* ox-reveal
  Makes org documents into presentations using js.
  #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)   
  #+END_SRC
* Org-mode
** Enable spell-checking in Org-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+END_SRC
** Replacing (...)
   #+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ▼")
   #+END_SRC

** Exporting

   Allow export to markdown and beamer (for presentations).

   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
     (require 'ox-beamer)
   #+END_SRC

   Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(python . t)))
   #+END_SRC
**** Exporting to HTML
     
     Don't include a footer with my contact and publishing information at the bottom
     of every exported HTML document.
     
     #+BEGIN_SRC emacs-lisp
     (setq org-html-postamble nil)
     #+END_SRC
     
     Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
     which checks the =$BROWSER= environment variable to choose the right browser.
     I'd like to always use Firefox, so:
     
     #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function 'browse-url-generic
     browse-url-generic-program "firefox")
     
     (setenv "BROWSER" "firefox")
     #+END_SRC
**** Exporting to PDF 
- Open compiled PDFs in =evince= instead of in the editor.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
        '(lambda ()
           (delete '("\\.pdf\\'" . default) org-file-apps)
           (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC
* Helm - interactive completion
  
  Helm makes it easy to complete various things. I find it to be easier
  to configure than ido in order to get completion in as many places as
  possible, although I prefer ido's way of switching buffers.

  #+begin_src emacs-lisp
    (use-package helm
      :init
      (progn
        (require 'helm-config)
        (setq helm-candidate-number-limit 100)
        ;; From https://gist.github.com/antifuchs/9238468
        (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
              helm-input-idle-delay 0.01  ; this actually updates things
                                            ; reeeelatively quickly.
              helm-quick-update t
              helm-M-x-requires-pattern nil
              helm-ff-skip-boring-files t)
        (helm-mode 1))
      :config
      (progn
        ;; I don't like the way switch-to-buffer uses history, since
        ;; that confuses me when it comes to buffers I've already
        ;; killed. Let's use ido instead.
        (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido)))
        (global-set-key (kbd "M-x") 'helm-M-x)
      :bind (("C-c h" . helm-mini)))
    (ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
  #+end_src

  #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init
  (progn
    (require 'helm-config)
    ;; limit max number of matches displayed for speed
    (setq helm-candidate-number-limit 100)
    ;; ignore boring files like .o and .a
    (setq helm-ff-skip-boring-files t)
    ;; replace locate with spotlight on Mac
    (setq helm-locate-command "mdfind -name %s %s"))
  :bind (("C-x f" . helm-for-files)))
  #+END_SRC

  Fix problem with org-capture and helm.

  #+begin_src emacs-lisp
(setcdr (assoc 'org-capture helm-completing-read-handlers-alist) nil)
  #+end_src
* Beacon
- flashes the cursor's line when you scroll
  #+BEGIN_SRC emacs-lisp
   (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  )
  #+END_SRC
* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
  :ensure t)
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)
    ))
  #+END_SRC
* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
  :ensure t)
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  #+END_SRC
* Python
  - install ipython
  - setting up environment
     #+BEGIN_SRC emacs-lisp
     (setq py-python-command "python3")
     (setq python-shell-interpreter "python3")
     (use-package elpy
     :ensure t
     :config 
     (elpy-enable))
     ;; use flycheck not flymake with elpy
     (when (require 'flycheck nil t)
     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
     (add-hook 'elpy-mode-hook 'flycheck-mode))
     #+END_SRC
  - ein
    #+BEGIN_SRC emacs-lisp
    (use-package ein
    :ensure t)
    #+END_SRC
  - Format code according to PEP8 on save:
    #+BEGIN_SRC emacs-lisp
    (use-package py-autopep8
    :ensure t)
    (require 'py-autopep8)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
    #+END_SRC
* PDF tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t)
(use-package org-pdfview
:ensure t)

(require 'pdf-tools)
(require 'org-pdfview)

#+END_SRC

* Silversearcher
#+BEGIN_SRC emacs-lisp
(use-package ag
:ensure t)
(use-package wgrep-ag
:ensure t)
;;when (executable-find "ag")
  (require 'ag)
  (require 'wgrep-ag)
  (setq-default ag-highlight-search t)
  (global-set-key (kbd "M-s") 'ag-project)
#+END_SRC
* Add a bunch of engines for =engine-mode=
- Installation
  #+BEGIN_SRC emacs-lisp
  (use-package engine-mode
  :ensure t)
  #+END_SRC
- Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.
  #+BEGIN_SRC emacs-lisp
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "G")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y")

  (engine-mode t)
#+END_SRC
* Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
      :ensure t)
(use-package all-the-icons-gnus 
      :ensure t) 
(use-package all-the-icons-ivy 
      :ensure t) 
(use-package emoji-fontset 
      :ensure t)
(use-package fontawesome
      :ensure t)
(use-package unicode-input
      :ensure t)
#+END_SRC
* c++
#+BEGIN_SRC emacs-lisp
(use-package ggtags
:ensure t
:config 
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1)))))
#+END_SRC
- C headers
  #+BEGIN_SRC emacs-lisp
  (use-package ac-c-headers
  :ensure t)
  #+END_SRC
* Dired
- Open media with the appropriate programs.
  #+BEGIN_SRC emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions
          '(("pdf" . "zathura")
            ("mkv" . "vlc")
            ("mp4" . "vlc")
            ("avi" . "vlc"))))
  #+END_SRC
* Eshell
  - Setting keybinding for eshell
    #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-x e") 'eshell)
    #+END_SRC
* lisp
#+BEGIN_SRC emacs-lisp
;(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :ensure t)
  #+END_SRC
* Web Dev
  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
  :ensure t)
  (use-package company-web
  :ensure t)
  (use-package emmet-mode
  :ensure t)
  ;;Automatically load web-mode when opening web-related files
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
  ;;Set indentations
  (defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  )
  (add-hook 'web-mode-hook  'my-web-mode-hook)    
  (setq tab-width 2)
  ;;Highlight of columns
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)
  ;;Company settings-Set the company completion vocabulary to css and html when in web-mode. This is combined into the indentations setting above.
  (defun my-web-mode-hook ()
  (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files))
  )
  ;;Turn on Emmet in web-mode.
  (add-hook 'web-mode-hook  'emmet-mode) 
  ;;Web-mode is able to switch modes into css (style tags) or js (script tags) in an html file. For Emmet to switch between html and css properly in the same document, this hook is added.
  (add-hook 'web-mode-before-auto-complete-hooks
    '(lambda ()
     (let ((web-mode-cur-language
  	    (web-mode-language-at-pos)))
               (if (string= web-mode-cur-language "php")
    	   (yas-activate-extra-mode 'php-mode)
      	 (yas-deactivate-extra-mode 'php-mode))
               (if (string= web-mode-cur-language "css")
    	   (setq emmet-use-css-transform t)
      	 (setq emmet-use-css-transform nil)))))
  #+END_SRC
