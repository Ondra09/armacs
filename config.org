#+TITLE: Emacs Config
#+AUTHOR: Abraham Raji
#+EMAIL: abrahamraji99@gmail.com

* Who am I?
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Abraham Raji"
        user-email "abrahamraji99@gmail.com")
  #+END_SRC
* Packages Maintinance
-  Sources   
   #+BEGIN_SRC emacs-lisp
   (load "package")
   (package-initialize)
   (load "package")
   (package-initialize)
   (add-to-list 'package-archives
                '("melpa-stable" . "https://melpa.org/packages/") t)
   (setq package-archive-enable-alist '(("melpa" magit f)))
   #+END_SRC
-  use-package command
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
   (setq use-package-verbose t)
   (setq use-package-always-ensure t)
   (require 'use-package)
   (use-package auto-compile
   :config (auto-compile-on-load-mode))
   (setq load-prefer-newer t)
   #+END_SRC
* auto-complete
   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
   :ensure t)
   (require 'auto-complete)
   (global-auto-complete-mode t)
   (add-to-list 'ac-modes 'org-mode)
   (ac-config-default)
   #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp
   (use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
  (add-hook 'elpy-mode-hook 'flycheck-mode)
;This creates a flycheck checker that runs proselint in texty buffers and displays my errors. 
 (flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
  (id (one-or-more (not (any " "))))
  (message (one-or-more not-newline)
  (zero-or-more "\n" (any " ") (one-or-more not-newline)))
  line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))
 ; flycheck in the appropriate buffers
(add-to-list 'flycheck-checkers 'proselint)
(add-hook 'markdown-mode-hook #'flycheck-mode)
(add-hook 'gfm-mode-hook #'flycheck-mode)
(add-hook 'text-mode-hook #'flycheck-mode)
(add-hook 'org-mode-hook #'flycheck-mode)
   #+END_SRC
* Title frame format
  #+BEGIN_SRC emacs-lisp
  (setq frame-title-format (list "%b  %[- GNU %F " emacs-version)
  icont-title-format(list "%b- GNU %F " emacs-version))
  #+END_SRC
* Org Settings
- Replacing ...
  #+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â†´")
  #+END_SRC
- Syntax Highlighting
  #+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t) ;;syntax highlighting in source blocks while editing
  #+END_SRC
- Spell Check
  #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode) ;;spellcheck
  #+END_SRC
- org LATEST
   #+BEGIN_SRC emacs-lisp
   (unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
   (package-install (elt (cdr (assoc 'org package-archive-contents)) 0)))
   (require 'org)
   #+END_SRC
* ido mode
   #+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-eveywhere t)
  (ido-mode 1)
   #+END_SRC
* Menu bar
   #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (defun my-menu-bar-open-after ()
  (remove-hook 'pre-command-hook 'my-menu-bar-open-after)
  (when (eq menu-bar-mode 42)
  (menu-bar-mode -1)))
  (defun my-menu-bar-open (&rest args)
  (interactive)
  (let ((open menu-bar-mode))
  (unless open
  (menu-bar-mode 1))
  (funcall 'menu-bar-open args)
  (unless open
  (setq menu-bar-mode 42)
  (add-hook 'pre-command-hook 'my-menu-bar-open-after))))
  (global-set-key [f10] 'my-menu-bar-open)
   #+END_SRC 
* Scrolling
  -  System Scroll bars.
   #+BEGIN_SRC emacs-lisp
   (scroll-bar-mode -1)
   #+END_SRC
  -  Mini-buffer Scroll bars.
   #+BEGIN_SRC emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
   #+END_SRC
  - Scroll Conservatively
   #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 100)
   #+END_SRC
* Text
  - Fancy Lambdas
   #+BEGIN_SRC emacs-lisp
   (global-prettify-symbols-mode t)
   #+END_SRC
  - Highlight current line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode)
   #+END_SRC
* Babel
  #+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
  (ruby . t)
  (dot . t)
  (gnuplot . t)))
  #+END_SRC
* Quickly visit Emacs configuration
   #+BEGIN_SRC emacs-lisp
     (defun 4br/visit-emacs-config ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") '4br/visit-emacs-config)
   #+END_SRC
* css-mode
   #+BEGIN_SRC elisp
   (use-package css-mode)
   #+END_SRC
* One-line Settings
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   (defalias 'list-buffers 'ibuffer)
   (tool-bar-mode -1)
   ;(setq org-support-shift-select t)
   (global-linum-mode t)
   (allout-mode) ;;outlining
   (global-font-lock-mode 1) ;;syntax highlighting
   (global-visual-line-mode t)
   (windmove-default-keybindings)
   (global-set-key (kbd "C-c <left>")  'windmove-left)
   (global-set-key (kbd "C-c <right>") 'windmove-right)
   (global-set-key (kbd "C-c <up>")    'windmove-up)
   (global-set-key (kbd "C-c <down>")  'windmove-down)
   #+END_SRC
* elpy
   #+BEGIN_SRC emacs-lisp
   (use-package elpy
   :ensure t
   :config 
   (elpy-enable))
   #+END_SRC
* htmlize
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize
   :ensure t)
   (setq org-html-postamble nil)
   #+END_SRC
* matlab 
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/home/guyfawkes/.emacs.d/matlab-emacs-master")
   (load-library "matlab-load")
   #+END_SRC
* org-mode Bullets
   #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))   
   #+END_SRC
* ox-reveal
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/org-reveal")
   (require 'ox-reveal)
   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)
   #+END_SRC
* try package
   #+BEGIN_SRC emacs-lisp
   (use-package try
   :ensure t)
   #+END_SRC

* ox-md
   #+BEGIN_SRC emacs-lisp
   (require 'ox-md)
   #+END_SRC
* Minted
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-latex-packages-alist '("" "minted"))
   (setq org-latex-listings 'minted)
   (setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   #+END_SRC

* Dired
   #+BEGIN_SRC emacs-lisp
   (use-package dired-details)
   (use-package dired+)
   (use-package dired-open
  :config
  (setq dired-open-extensions
        '(("pdf" . "evince")
          ("mkv" . "vlc")
          ("mp4" . "vlc")
          ("avi" . "vlc"))))
   #+END_SRC
* liso-theme
   #+BEGIN_SRC emacs-lisp
   (use-package liso-theme
   :ensure t
   :config (load-theme 'liso t))
   (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque."
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value)
   (transparency 90))
   #+END_SRC
